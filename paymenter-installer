#!/bin/bash
set -e

# Kleuren
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
BLUE="\e[34m"
RESET="\e[0m"

log() { echo -e "${BLUE}[INFO]${RESET} $1"; }
success() { echo -e "${GREEN}[OK]${RESET} $1"; }
warn() { echo -e "${YELLOW}[WARN]${RESET} $1"; }
error() { echo -e "${RED}[ERROR]${RESET} $1"; }

# ================= INPUT =================
echo "-----------------------------------"
echo " Welkom bij de Paymenter installer "
echo "-----------------------------------"

# Vraag alleen als variabelen niet al via ENV gezet zijn
if [ -z "${DB_PASSWORD:-}" ]; then
    read -p "Database wachtwoord voor Paymenter: " DB_PASSWORD
fi

if [ -z "${DOMAIN:-}" ]; then
    read -p "Domeinnaam (bijv. paymenter.example.com): " DOMAIN
fi

if [ -z "${ADMIN_FIRST:-}" ]; then
    read -p "Admin voornaam: " ADMIN_FIRST
fi

if [ -z "${ADMIN_LAST:-}" ]; then
    read -p "Admin achternaam: " ADMIN_LAST
fi

if [ -z "${ADMIN_EMAIL:-}" ]; then
    read -p "Admin e-mail: " ADMIN_EMAIL
fi

if [ -z "${ADMIN_PASS:-}" ]; then
    read -sp "Admin wachtwoord: " ADMIN_PASS
    echo ""
fi

echo ""
log "Configuratie:"
echo "  Domein: $DOMAIN"
echo "  Database user: paymenter"
echo "  Database naam: paymenter"
echo "  Admin: $ADMIN_FIRST $ADMIN_LAST <$ADMIN_EMAIL>"

# ================= DEPENDENCIES =================
install_dependencies() {
    log "Installeer dependencies..."
    apt update
    apt -y install software-properties-common curl apt-transport-https ca-certificates gnupg lsb-release
    LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
    curl -sSL https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | \
        sudo bash -s -- --mariadb-server-version="mariadb-10.11"
    apt update
    apt -y install php8.3 php8.3-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip,intl,redis} \
                   mariadb-server nginx tar unzip git redis-server
    curl -sS https://getcomposer.org/installer | \
        sudo php -- --install-dir=/usr/local/bin --filename=composer
    success "Dependencies geïnstalleerd."
}

# ================= DATABASE =================
setup_database() {
    log "Database configureren..."
    if mysql -uroot -e "USE paymenter;" >/dev/null 2>&1; then
        read -p "Database 'paymenter' bestaat al. Opnieuw maken? (y/N): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            mysql -uroot -e "DROP DATABASE paymenter;"
            mysql -uroot -e "CREATE DATABASE paymenter;"
        else
            warn "Oude database blijft bestaan."
        fi
    else
        mysql -uroot -e "CREATE DATABASE paymenter;"
    fi

    mysql -uroot -e "CREATE USER IF NOT EXISTS 'paymenter'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
    mysql -uroot -e "GRANT ALL PRIVILEGES ON paymenter.* TO 'paymenter'@'127.0.0.1';"
    success "Database ingesteld."
}

# ================= PAYMENTER INSTALL =================
install_paymenter() {
    log "Paymenter downloaden..."
    rm -rf /var/www/paymenter
    mkdir -p /var/www/paymenter
    cd /var/www/paymenter
    curl -Lo paymenter.tar.gz https://github.com/paymenter/paymenter/releases/latest/download/paymenter.tar.gz
    tar -xzf paymenter.tar.gz
    chmod -R 755 storage/* bootstrap/cache/
    success "Paymenter geïnstalleerd."
}

# ================= NGINX CONFIG =================
configure_nginx() {
    log "Nginx configureren..."
    cat <<EOF > /etc/nginx/sites-available/paymenter.conf
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $DOMAIN;
    root /var/www/paymenter/public;
    
    index index.php;
    charset utf-8;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF
    ln -sf /etc/nginx/sites-available/paymenter.conf /etc/nginx/sites-enabled/
    systemctl restart nginx
    success "Nginx config gemaakt."

    log "SSL certificaat aanvragen..."
    apt -y install certbot python3-certbot-nginx
    certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "$ADMIN_EMAIL"
    success "SSL actief."
}

# ================= CONFIG PAYMENTER =================
configure_paymenter() {
    log "Paymenter configureren..."
    cd /var/www/paymenter
    cp .env.example .env
    composer install --no-dev --optimize-autoloader
    php artisan key:generate --force
    php artisan storage:link

    # Alleen DB_PASSWORD instellen
    if grep -q "^DB_PASSWORD=" .env; then
        sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=$DB_PASSWORD|" .env
    else
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
    fi

    php artisan migrate --force --seed
    php artisan db:seed --class=CustomPropertySeeder
    php artisan app:init
    chown -R www-data:www-data /var/www/paymenter/*
    success "Paymenter geconfigureerd."
}

# ================= CRONJOB & QUEUE =================
setup_cron_and_queue() {
    log "Cronjob instellen..."
    (crontab -l 2>/dev/null; echo "* * * * * php /var/www/paymenter/artisan schedule:run >> /dev/null 2>&1") | crontab -
    success "Cronjob toegevoegd."

    log "Queue worker service maken..."
    cat <<EOF > /etc/systemd/system/paymenter.service
[Unit]
Description=Paymenter Queue Worker

[Service]
User=www-data
Group=www-data
Restart=always
ExecStart=/usr/bin/php /var/www/paymenter/artisan queue:work
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
    systemctl enable --now paymenter.service
    systemctl enable --now redis-server
    success "Queue worker actief."
}

# ================= CREATE ADMIN =================
create_first_user() {
    log "Admin gebruiker aanmaken..."
    cd /var/www/paymenter
    php artisan app:user:create \
      --first-name="$ADMIN_FIRST" \
      --last-name="$ADMIN_LAST" \
      --email="$ADMIN_EMAIL" \
      --password="$ADMIN_PASS" \
      --admin=1
    success "Admin gebruiker aangemaakt: $ADMIN_FIRST $ADMIN_LAST ($ADMIN_EMAIL)"
}

# ================= SCRIPT FLOW =================
install_dependencies
setup_database
install_paymenter
configure_nginx
configure_paymenter
setup_cron_and_queue
create_first_user

success "✅ Paymenter installatie compleet!"
echo "Bezoek nu: https://$DOMAIN"
