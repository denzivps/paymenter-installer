#!/bin/bash
set -euo pipefail

# Kleuren
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
BLUE="\e[34m"
RESET="\e[0m"

log() { echo -e "${BLUE}[INFO]${RESET} $1"; }
success() { echo -e "${GREEN}[OK]${RESET} $1"; }
warn() { echo -e "${YELLOW}[WARN]${RESET} $1"; }
error() { echo -e "${RED}[ERROR]${RESET} $1"; }

# Functie om SSL te installeren
install_ssl() {
    log "Certbot installeren en SSL configureren voor $1..."
    apt -y install certbot python3-certbot-nginx
    certbot --nginx -d "$1"
    success "SSL succesvol geconfigureerd."
}

# Database setup
setup_database() {
    read -p "Voer het databasewachtwoord in voor Paymenter: " DB_PASSWORD
    if mysql -e "USE paymenter;" >/dev/null 2>&1; then
        read -p "Database 'paymenter' bestaat al. Wilt u deze opnieuw aanmaken? (Y/N): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            mysql -e "DROP DATABASE IF EXISTS paymenter;"
            mysql -e "CREATE DATABASE paymenter;"
            success "Database opnieuw aangemaakt."
        else
            warn "Database blijft ongewijzigd."
        fi
    else
        mysql -e "CREATE DATABASE paymenter;"
        success "Database aangemaakt."
    fi

    mysql -e "CREATE USER IF NOT EXISTS 'paymenter'@'127.0.0.1' IDENTIFIED BY '$DB_PASSWORD';"
    mysql -e "GRANT ALL PRIVILEGES ON paymenter.* TO 'paymenter'@'127.0.0.1' WITH GRANT OPTION;"

    export DB_PASSWORD
}

# Dependencies installeren
install_dependencies() {
    log "Benodigde pakketten installeren..."
    apt -y install software-properties-common curl apt-transport-https ca-certificates gnupg lsb-release
    LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
    curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash -s -- --mariadb-server-version="mariadb-10.11"
    apt update
    apt -y install php8.2 php8.2-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} \
                   mariadb-server nginx tar unzip git redis-server
    success "Dependencies geïnstalleerd."

    log "Composer installeren..."
    curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
    success "Composer geïnstalleerd."
}

# Paymenter downloaden
install_paymenter() {
    log "Paymenter downloaden..."
    if [ -d "/var/www/paymenter" ]; then
        warn "/var/www/paymenter bestaat al. Overschrijven..."
        rm -rf /var/www/paymenter
    fi
    mkdir -p /var/www/paymenter
    cd /var/www/paymenter
    curl -Lo paymenter.tar.gz https://github.com/paymenter/paymenter/releases/latest/download/paymenter.tar.gz
    tar -xzvf paymenter.tar.gz
    chmod -R 755 storage/* bootstrap/cache/
    success "Paymenter gedownload."
}

# Nginx configureren
configure_nginx() {
    read -p "Voer je domeinnaam of IP-adres in: " domain
    cat <<EOF > /etc/nginx/sites-available/paymenter.conf
server {
    listen 80;
    listen [::]:80;
    server_name $domain;
    root /var/www/paymenter/public;
    index index.php;
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }
    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
    }
}
EOF
    ln -sf /etc/nginx/sites-available/paymenter.conf /etc/nginx/sites-enabled/
    systemctl restart nginx
    success "Nginx geconfigureerd."

    read -p "Wil je SSL installeren voor $domain? (Y/N): " ssl_choice
    if [[ "$ssl_choice" =~ ^[Yy]$ ]]; then
        install_ssl "$domain"
    fi
}

# Paymenter configureren
configure_paymenter() {
    log "Paymenter configureren..."
    cd /var/www/paymenter
    cp .env.example .env
    composer install --no-dev --optimize-autoloader
    php artisan key:generate --force
    php artisan storage:link
    echo "DB_DATABASE=paymenter" >> .env
    echo "DB_USERNAME=paymenter" >> .env
    echo "DB_PASSWORD=$DB_PASSWORD" >> .env
    php artisan migrate --force --seed
    chown -R www-data:www-data /var/www/paymenter/*
    success "Paymenter geconfigureerd."
}

# Cronjob & queue worker
setup_cron_and_queue() {
    log "Cronjob toevoegen..."
    (crontab -l 2>/dev/null; echo "* * * * * php /var/www/paymenter/artisan schedule:run >> /dev/null 2>&1") | crontab -
    success "Cronjob toegevoegd."

    log "Queue worker configureren..."
    cat <<EOF > /etc/systemd/system/paymenter.service
[Unit]
Description=Paymenter Queue Worker
[Service]
User=www-data
Group=www-data
Restart=always
ExecStart=/usr/bin/php /var/www/paymenter/artisan queue:work
StartLimitInterval=180
StartLimitBurst=30
RestartSec=5s
[Install]
WantedBy=multi-user.target
EOF
    systemctl enable --now paymenter.service
    success "Queue worker actief."
}

# Eerste gebruiker aanmaken
create_first_user() {
    cd /var/www/paymenter
    php artisan p:user:create
}

# --- SCRIPT START ---
log "Paymenter installatie gestart..."
setup_database
install_dependencies
install_paymenter
configure_nginx
configure_paymenter
setup_cron_and_queue
create_first_user
success "Paymenter installatie voltooid!"
